
@page "/profil"
@inject HttpClient client
@inject IJSRuntime js
<h3>Profile</h3>
<small>Add as many profile as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="profil/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (profile == null)
{
    <text>Loading...</text>
}
else if (profile.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Profil prof in profile)
            {
                <tr>
                    <td>@prof.Id</td>
                    <td>@prof.FirstName</td>
                    <td>@prof.LastName</td>
                    <td>@prof.Email</td>
                    <td>@prof.Description</td>
                    <td>
                        <a class="btn btn-success" href="profil/edit/@prof.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(prof.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    Profil[] profile { get; set; }
    protected override async Task OnInitializedAsync()
    {
        profile = await client.GetFromJsonAsync<Profil[]>("api/profil");
    }
    async Task Delete(int profilId)
    {
        var prof = profile.First(x => x.Id == profilId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {prof.FirstName}'s ({prof.Id}) Record?"))
        {
            await client.DeleteAsync($"api/profil/{profilId}");
            await OnInitializedAsync();
        }
    }
}